>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# POSITIVE TEST CASES
>>> bg.integer_validator("my_int", 12)

# NEGATIVE TEST CASES
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> bg.integer_validator("int")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented
>>> bg.integer_validator("none", None)
Traceback (most recent call last):
...
TypeError: none must be an integer
>>> bg.integer_validator("float", 3.14)
Traceback (most recent call last):
...
TypeError: float must be an integer
>>> bg.integer_validator("bool", True)
Traceback (most recent call last):
...
TypeError: bool must be an integer
>>> bg.integer_validator("str", "string")
Traceback (most recent call last):
...
TypeError: str must be an integer
>>> bg.integer_validator("str2", "12")
Traceback (most recent call last):
...
TypeError: str2 must be an integer
>>> bg.integer_validator("list", [1])
Traceback (most recent call last):
...
TypeError: list must be an integer
>>> bg.integer_validator("tuple", (2,))
Traceback (most recent call last):
...
TypeError: tuple must be an integer
>>> bg.integer_validator("dict", {3})
Traceback (most recent call last):
...
TypeError: dict must be an integer
>>> bg.integer_validator("zero", 0)
Traceback (most recent call last):
...
ValueError: zero must be greater than 0
>>> bg.integer_validator("negative", -9)
Traceback (most recent call last):
...
ValueError: negative must be greater than 0
